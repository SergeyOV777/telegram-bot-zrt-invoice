import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram.ext import PicklePersistence
from menu import get_main_menu_inline
from handlers.invoice_handler import invoice_handler, invoice_callback_handler
from handlers.client_list_handler import list_clients
from handlers.defect_handler import defect_handler
from handlers.remont_start_handler import remont_start_handler
from handlers.vyezd_start_handler import vyezd_start_handler
from handlers.vyezd_invoice_handler import vyezd_invoice_callback_handler
from handlers.remont_vyezd_start_handler import remont_vyezd_start_handler
from handlers.remont_vyezd_invoice_handler import remont_vyezd_invoice_callback_handler
import config
from telegram import ReplyKeyboardRemove

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)


def log_message(update, context):
    user = update.effective_user
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({user.first_name} {user.last_name}): {update.message.text}")

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
class LoggingContext:
    def __init__(self, context, update):
        self._context = context
        self.update = update

    def reply_text(self, text, *args, **kwargs):
        logging.info(f"–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.update.effective_user.id}: {text}")
        return self.update.message.reply_text(text, *args, **kwargs)

    def __getattr__(self, name):
        return getattr(self._context, name)

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤

def with_logging(handler_func):
    def wrapper(update, context):
        log_message(update, context)
        logging_context = LoggingContext(context, update)
        return handler_func(update, logging_context)
    return wrapper


def start(update, context):
    """–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardRemove()
    )
    update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_inline()
    )


def unknown(update, context):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.",
        reply_markup=get_main_menu_inline()
    )


def stub_handler(update, context):
    update.message.reply_text("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–ø–µ—Ä–µ–º–µ—â–µ–Ω–æ —Å—é–¥–∞)
start = with_logging(start)
unknown = with_logging(unknown)
stub_handler = with_logging(stub_handler)
remont_start_handler = with_logging(remont_start_handler)
defect_handler = with_logging(defect_handler)
invoice_handler = with_logging(invoice_handler)


def main_menu_callback_handler(update, context):
    print("main_menu_callback_handler called")
    query = update.callback_query
    data = query.data

    if data == 'main:remont':
        from handlers.remont_start_handler import remont_start_handler
        remont_start_handler(update, context)
    elif data == 'main:vyezd':
        vyezd_start_handler(update, context)
    elif data == 'main:remont_vyezd':
        remont_vyezd_start_handler(update, context)
    elif data == 'main:payedit':
        context.user_data['wait_payment_details'] = True
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã ‚¨áÔ∏è")
        return
    elif data == 'main:defects':
        query.answer()
        query.edit_message_text("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=get_main_menu_inline())
    else:
        query.answer()
        query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_main_menu_inline())


def text_handler(update, context):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
    if context.user_data.get('wait_payment_details'):
        context.user_data['payment_details'] = update.message.text.strip()
        context.user_data['wait_payment_details'] = False
        update.message.reply_text("–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã")
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_inline())
        return
    # –∏–Ω–∞—á–µ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ invoice_handler
    invoice_handler(update, context)


def error_handler(update, context):
    import traceback
    print("Exception:", traceback.format_exc())
    if update and hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    elif update and hasattr(update, 'message') and update.message:
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    persistence = PicklePersistence(filename='bot_data.pkl')
    updater = Updater(config.BOT_TOKEN, use_context=True, persistence=persistence)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text('üíº –ü–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç—É (—Ä–µ–º–æ–Ω—Ç + –≤—ã–µ–∑–¥—ã)'), stub_handler))
    dp.add_handler(MessageHandler(Filters.text('üîß –ü–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç—É (—Ä–µ–º–æ–Ω—Ç)'), remont_start_handler))
    dp.add_handler(MessageHandler(Filters.text('üöö –ü–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç—É (–≤—ã–µ–∑–¥—ã)'), stub_handler))
    dp.add_handler(MessageHandler(Filters.text('üêû –î–µ—Ñ–µ–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤'), stub_handler))
    dp.add_handler(MessageHandler(Filters.text('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã'), stub_handler))
    dp.add_handler(MessageHandler(Filters.text, text_handler))
    dp.add_handler(CallbackQueryHandler(main_menu_callback_handler, pattern='^main:'))
    dp.add_handler(CallbackQueryHandler(remont_vyezd_invoice_callback_handler, pattern='^remontvyezd:'))
    dp.add_handler(CallbackQueryHandler(vyezd_invoice_callback_handler, pattern='^vyezd:'))
    dp.add_handler(CallbackQueryHandler(invoice_callback_handler))
    dp.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()