# handlers/invoice_handler.py

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext
from services.sheets_service import get_all_invoices
from services.invoice_formatter import format_invoice_block


def invoice_handler(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á—ë—Ç(–∞) –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Google Sheets."""
    client_name = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
    if client_name == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        from menu import get_main_menu_keyboard
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
        return

    invoices = get_all_invoices()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—á–µ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    user_invoices = [
        inv for inv in invoices if inv.get('–ö–ª–∏–µ–Ω—Ç', '').strip().lower() == client_name.lower()
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    clients = sorted({inv.get('–ö–ª–∏–µ–Ω—Ç', '').strip() for inv in invoices if inv.get('–ö–ª–∏–µ–Ω—Ç')})
    keyboard = [[client] for client in clients]
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    if not user_invoices:
        update.message.reply_text(
            f"‚ùå –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ¬´{client_name}¬ª –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.",
            reply_markup=reply_markup
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
    block, total = format_invoice_block(client_name, user_invoices)
    payment_details = context.user_data.get('payment_details', '–°–±–µ—Ä–±–∞–Ω–∫, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ê–ª—å—Ñ–∞ ‚Äî –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 89264071093.')
    update.message.reply_text(f"{client_name} üëá", parse_mode='HTML', reply_markup=reply_markup)
    update.message.reply_text(f"{block}\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n{payment_details}")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫

def invoice_callback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    invoices = get_all_invoices()
    clients = context.user_data.get('client_list', [])
    keyboard = [[InlineKeyboardButton(client, callback_data=f"client_idx:{i}")] for i, client in enumerate(clients)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if data == "back_to_menu":
        from menu import get_main_menu_inline
        query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_inline())
        return

    if data.startswith("client_idx:"):
        idx = int(data.split("client_idx:", 1)[1])
        if idx < 0 or idx >= len(clients):
            query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
            return
        client_name = clients[idx]
        user_invoices = [
            inv for inv in invoices if inv.get('–ö–ª–∏–µ–Ω—Ç', '').strip().lower() == client_name.lower()
        ]
        if not user_invoices:
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚ùå –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ¬´{client_name}¬ª –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤."
            )
        else:
            block, total = format_invoice_block(client_name, user_invoices)
            payment_details = context.user_data.get('payment_details', '–°–±–µ—Ä–±–∞–Ω–∫, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ê–ª—å—Ñ–∞ ‚Äî –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 89264071093.')
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"{client_name} üëá"
            )
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"{block}\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n{payment_details}"
            )
        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=reply_markup
        )
        return
